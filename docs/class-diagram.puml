@startuml class-diagram
' Configuration pour un affichage carré compact
skinparam packageStyle rectangle
skinparam classAttributeIconSize 0
skinparam shadowing false
skinparam defaultFontName Arial, Helvetica, sans-serif
skinparam dpi 200
skinparam linetype ortho
skinparam nodesep 60
skinparam ranksep 80
skinparam padding 8

' Couleurs pour une meilleure lisibilité
skinparam class {
    BackgroundColor<<config>> LightYellow
    BackgroundColor<<analyzer>> LightBlue
    BackgroundColor<<page>> LightGreen
    BackgroundColor<<cache>> LightCoral
    BorderColor Black
    ArrowColor DarkGray
}

title Architecture IADATA700 MangetaMain

package "🎯 APPLICATION" #TECHNOLOGY {
    class App {
        -config: AppConfig
        --
        +run(): void
    }
    
    class "AppConfig" as AppConfig <<config>> {
        +default_recipes_path: Path
        +default_interactions_path: Path
        +page_title: str
        +layout: str
    }
    
    App -right-> AppConfig : configure
}

package "📦 CORE (Logique Métier)" #BUSINESS {
    
    together {
        class DataLoader {
            -data_path: Path
            --
            +load_data(): DataFrame
            +get_data(): DataFrame
        }
        
        class DataExplorer {
            -loader: DataLoader
            --
            +df: DataFrame
        }
    }
    
    class "CacheManager" as CacheManager <<cache>> {
        -base_cache_dir: Path
        -logger: Logger
        --
        +get(): Optional[T]
        +set(): bool
        +clear(): int
        +get_info(): dict
    }
    
    abstract class "CacheableMixin" as CacheableMixin <<cache>> {
        {abstract}
        --
        +cached_operation(): T
        +enable_cache(): void
    }
    
    class "PreprocessingConfig" as PreprocessingConfig <<config>> {
        +enable_preprocessing: bool
        +outlier_method: str
        +outlier_threshold: float
        --
        +get_hash(): str
    }
    
    class "InteractionsAnalyzer" as InteractionsAnalyzer <<analyzer>> {
        +interactions: DataFrame
        +recipes: DataFrame
        +preprocessing: PreprocessingConfig
        --
        +aggregate(): DataFrame
        +popularity_vs_rating(): DataFrame
        +get_cache_info(): dict
    }
    
    ' Relations internes au package core
    DataExplorer --> DataLoader : utilise
    CacheableMixin --> CacheManager : utilise
    InteractionsAnalyzer -up-|> CacheableMixin : hérite
    InteractionsAnalyzer --> PreprocessingConfig : utilise
}

package "🖥️ COMPONENTS (Interface UI)" #APPLICATION {
    
    together {
        class "PopularityAnalysisPage\n(Page 1)" as PopularityAnalysisPage <<page>> {
            -interactions_analyzer: InteractionsAnalyzer
            -config, logger
            --
            +run(), render_sidebar()
            +_render_step_1_preprocessing()
            +_render_step_2_aggregation()
            +_render_step_3_scatter()
            +_render_step_4_characteristics()
        }
        
        class PopularityAnalysisConfig <<config>> {
            +interactions_path: Path
            +recipes_path: Path
        }
    }
    
    together {
        class "IngredientsClusteringPage\n(Page 2)" as IngredientsClusteringPage <<page>> {
            -matrix_path: Path
            -ingredients_list_path: Path
            -config, logger
            --
            +run(), render_sidebar()
            +_load_cooccurrence_matrix()
            +_perform_clustering()
            +_compute_tsne()
            --
            +render_cooccurrence_analysis()
            +render_clusters()
            +render_tsne_visualization()
        }
        
        class IngredientsClusteringConfig <<config>> {
            +matrix_path: Path
            +ingredients_list_path: Path
            +n_ingredients: int = 40
            +n_clusters: int = 4
            +tsne_perplexity: int = 30
        }
    }
    
    ' Relations internes composants
    PopularityAnalysisPage --> PopularityAnalysisConfig
    IngredientsClusteringPage --> IngredientsClusteringConfig
}

' ═══════════════════════════════════════════════════════════════
' RELATIONS PRINCIPALES
' ═══════════════════════════════════════════════════════════════

' Application vers Pages (utilisation)
App --> PopularityAnalysisPage : <<Page 1>>
App --> IngredientsClusteringPage : <<Page 2>>
App --> DataExplorer : <<Home>>

' Pages vers Analyseurs (composition forte)
PopularityAnalysisPage --> InteractionsAnalyzer : analyse

' Analyseurs vers DataLoader (dépendance)
InteractionsAnalyzer ..> DataLoader : charge

' Cache management
PopularityAnalysisPage ..> CacheManager : contrôle

' ═══════════════════════════════════════════════════════════════
' NOTES EXPLICATIVES
' ═══════════════════════════════════════════════════════════════

note top of App
  **Application Streamlit Multi-Pages**
  • 🏠 Home (exploration générale)
  • 🔥 Page 1: Analyse popularité
  • 🍳 Page 2: Clustering ingrédients
  --
  • Logger structuré
  • Tests: 24 tests (Page 2)
end note

note bottom of CacheManager
  **Cache Centralisé**
  • Structure: cache/analyzer/operation/hash.pkl
  • Métadonnées: timestamp, params
  • Support multi-analyseurs
  • Nettoyage granulaire
end note

note bottom of PopularityAnalysisPage
  **Page 1 - Structure 4 Étapes**
  ① Preprocessing outliers
  ② Agrégation par recette
  ③ Scatter popularité/notes
  ④ Features vs popularité
  --
  • User Story dans UI
  • Contrôles cache sidebar
end note

note bottom of IngredientsClusteringPage
  **Page 2 - Clustering Ingrédients**
  • Matrice 300×300 précalculée
  • Sélection dynamique 40-300 ingrédients
  • Clustering K-means (3-20 clusters)
  • Visualisation t-SNE 2D
  --
  • Pas de preprocessing runtime
  • Cache Streamlit natif uniquement
end note

legend bottom right
  **Légende**
  <<config>> = Configuration (dataclass)
  <<analyzer>> = Analyseur métier
  <<page>> = Page Streamlit
  <<cache>> = Système de cache
  --
  Flèches:
  → Relation forte (composition)
  ⇢ Relation faible (dépendance)
  ──|> Héritage
endlegend

@enduml
