Architecture AWS
===============

Infrastructure de d√©ploiement de l'application Mangetamain sur Amazon Web Services.

.. image:: Architecture_AWS_Mangetamain.svg
   :width: 100%
   :alt: Architecture AWS de Mangetamain

Vue d'Ensemble
--------------

L'application a √©t√© d√©ploy√©e sur **deux environnements** √† des fins de **comparaison et tests** :

1. **Streamlit Cloud** (gratuit) : https://iadata700mangetamain-uwgeofayxcifcmeisuesrb.streamlit.app/ ‚úÖ **Actif**
2. **AWS EC2** (infrastructure d√©di√©e) : ~~http://13.37.60.84:8501~~ ‚ùå **D√©sactiv√©** (pour √©viter les co√ªts)

.. note::
   L'infrastructure AWS EC2 a √©t√© utilis√©e pour tester et comparer les performances avec Streamlit Cloud, 
   mais elle n'est **plus active** pour √©viter les frais mensuels (~30‚Ç¨/mois). Seul le d√©ploiement 
   **Streamlit Cloud** reste accessible publiquement.

Cette architecture AWS √©tait optimis√©e pour un usage acad√©mique/d√©monstration, 
privil√©giant la simplicit√© et le contr√¥le des co√ªts tout en maintenant des performances acceptables.

**Configuration test√©e :**

* üåê **Acc√®s** : ~~http://13.37.60.84:8501~~ (d√©sactiv√©)
* üñ•Ô∏è **Instance** : EC2 t3.medium (2 vCPU, 4 GB RAM)
* üí∞ **Co√ªt** : ~30‚Ç¨/mois (raison de la d√©sactivation)
* üë• **Capacit√©** : ~500 utilisateurs concurrents
* ‚è∏Ô∏è **Statut** : Instance arr√™t√©e apr√®s phase de tests

Composants Utilis√©s
-------------------

.. list-table::
   :header-rows: 1
   :widths: 20 25 25 15 15

   * - Composant
     - Description
     - Interaction
     - Co√ªt
     - Statut
   * - üåê **Internet**
     - Utilisateurs acc√©dant via navigateur
     - Source des requ√™tes HTTP/HTTPS
     - Gratuit
     - ‚úÖ
   * - üîí **Elastic IP**
     - Adresse IP publique fixe (13.37.60.84)
     - Re√ßoit requ√™tes ‚Üí dirige vers EC2
     - Gratuit*
     - ‚úÖ Gard√©
   * - üõ°Ô∏è **VPC & Security Group**
     - Pare-feu num√©rique autorisant port 8501
     - V√©rifie & laisse passer trafic l√©gitime
     - Gratuit
     - ‚úÖ Gard√©
   * - üñ•Ô∏è **EC2 Instance**
     - Serveur 2vCPU/4GB RAM Ubuntu 24.04
     - Ex√©cute Streamlit & traite requ√™tes
     - ~30‚Ç¨/mois
     - ‚úÖ Gard√©
   * - üç≥ **Streamlit App**
     - Application Python interactive (port 8501)
     - Charge donn√©es, cr√©e visualisations
     - Gratuit
     - ‚úÖ Gard√©
   * - ‚úì **User's Browser**
     - Navigateur affichant l'interface web
     - Affiche l'app & envoie actions utilisateur
     - Gratuit
     - ‚úÖ

\* *Gratuit tant que l'Elastic IP est attach√©e √† une instance en cours d'ex√©cution*

Composants Non Utilis√©s
------------------------

Pour des raisons de **contr√¥le des co√ªts** et de simplicit√©, certains composants AWS classiques 
ne sont pas utilis√©s :

.. list-table::
   :header-rows: 1
   :widths: 30 20 50

   * - Composant
     - Co√ªt
     - Raison
   * - **Route 53** (DNS)
     - 0.50‚Ç¨/mois
     - Acc√®s direct via IP ``13.37.60.84:8501``
   * - **Application Load Balancer** (ALB)
     - 25‚Ç¨/mois
     - Une seule instance suffit (~500 users max)
   * - **Auto Scaling Group**
     - Gratuit*
     - Pas de besoin d'auto-scaling pour une d√©mo

\* *Gratuit mais n√©cessiterait un ALB payant*

Configuration Technique
-----------------------

Instance EC2
~~~~~~~~~~~~

**Type** : ``t3.medium``

* **vCPU** : 2
* **RAM** : 4 GB
* **Stockage** : 20 GB gp3 SSD
* **OS** : Ubuntu 24.04 LTS
* **R√©gion** : eu-west-3 (Paris)

Security Group
~~~~~~~~~~~~~~

R√®gles d'entr√©e (Inbound) :

.. code-block:: text

   Port 8501 (TCP) : 0.0.0.0/0  # Streamlit
   Port 22 (SSH) : [IP Admin]   # Administration

R√®gles de sortie (Outbound) :

.. code-block:: text

   All traffic : 0.0.0.0/0      # Internet access

Application Streamlit
~~~~~~~~~~~~~~~~~~~~~

* **Port** : 8501
* **Workers** : 1 (mode single-process)
* **Max upload size** : 200 MB
* **Cache** : Activ√© (Streamlit native + cache disque)
* **Donn√©es** : Charg√©es en m√©moire au d√©marrage

D√©ploiement
-----------

Processus de D√©ploiement
~~~~~~~~~~~~~~~~~~~~~~~~~

1. **Connexion SSH** √† l'instance EC2
2. **Pull** du code depuis GitHub
3. **Installation** des d√©pendances avec ``uv``
4. **Lancement** de l'application :

   .. code-block:: bash

      cd /home/ubuntu/IADATA700_mangetamain
      git pull origin main
      uv sync
      uv run streamlit run src/app.py --server.port=8501

5. **V√©rification** : http://13.37.60.84:8501

Gestion du Service
~~~~~~~~~~~~~~~~~~

L'application peut √™tre g√©r√©e via **systemd** pour un d√©marrage automatique :

.. code-block:: bash

   # D√©marrer le service
   sudo systemctl start mangetamain

   # Arr√™ter le service
   sudo systemctl stop mangetamain

   # Voir les logs
   sudo journalctl -u mangetamain -f

Monitoring
----------

M√©triques EC2
~~~~~~~~~~~~~

Via AWS CloudWatch (gratuit) :

* CPU utilization
* Network in/out
* Disk read/write
* Status checks

Logs Application
~~~~~~~~~~~~~~~~

Logs stock√©s localement sur l'instance :

* ``debug/debug.log`` : Logs d√©taill√©s (INFO/DEBUG)
* ``debug/errors.log`` : Erreurs uniquement

Performances
------------

Capacit√©
~~~~~~~~

* **Utilisateurs simultan√©s** : ~500 (estimation)
* **Temps de r√©ponse** : <2s pour les requ√™tes simples
* **Temps de chargement initial** : ~3-5s

Limitations
~~~~~~~~~~~

* Pas de haute disponibilit√© (single instance)
* Pas de load balancing
* Pas de CDN pour les assets statiques
* Downtime lors des mises √† jour

√âvolutions Possibles
~~~~~~~~~~~~~~~~~~~~

Pour un passage en production :

1. **Load Balancer** + **Auto Scaling** pour la haute disponibilit√©
2. **Route 53** pour un nom de domaine personnalis√©
3. **CloudFront** (CDN) pour am√©liorer les performances
4. **RDS** pour une base de donn√©es persistante
5. **S3** pour stocker les donn√©es brutes
6. **ElastiCache** pour un cache distribu√©

Co√ªts
-----

Estimation Mensuelle
~~~~~~~~~~~~~~~~~~~~

.. list-table::
   :header-rows: 1
   :widths: 40 30 30

   * - Ressource
     - Configuration
     - Co√ªt mensuel
   * - EC2 t3.medium
     - 2 vCPU, 4 GB RAM, 24/7
     - ~30‚Ç¨
   * - Elastic IP
     - Attach√©e √† l'instance
     - Gratuit
   * - Stockage EBS
     - 20 GB gp3
     - ~2‚Ç¨
   * - Transfert de donn√©es
     - ~10 GB/mois sortants
     - ~1‚Ç¨
   * - **TOTAL**
     - 
     - **~33‚Ç¨/mois**

Comparaison des Deux D√©ploiements
----------------------------------

Les deux environnements sont utilis√©s **en parall√®le** pour √©valuer et comparer les approches.

.. list-table::
   :header-rows: 1
   :widths: 30 35 35

   * - Crit√®re
     - Streamlit Cloud
     - AWS EC2
   * - **Co√ªt**
     - ‚úÖ Gratuit (plan Community)
     - ‚ùå ~33‚Ç¨/mois
   * - **D√©ploiement**
     - ‚úÖ Automatique depuis GitHub
     - ‚ö†Ô∏è Manuel (SSH + git pull)
   * - **Maintenance**
     - ‚úÖ G√©r√©e par Streamlit
     - ‚ùå √Ä g√©rer (updates, monitoring)
   * - **Contr√¥le**
     - ‚ùå Limit√© (ressources fixes)
     - ‚úÖ Total (SSH, config, monitoring)
   * - **Performances**
     - ‚ö†Ô∏è Variables (ressources partag√©es)
     - ‚úÖ Garanties (ressources d√©di√©es)
   * - **Personnalisation**
     - ‚ùå Limit√©e (port 8501 fixe)
     - ‚úÖ Compl√®te (ports, services, etc.)
   * - **URL**
     - https://[app-name].streamlit.app
     - http://13.37.60.84:8501
   * - **Uptime**
     - ‚úÖ G√©r√© par Streamlit (~99%)
     - ‚ö†Ô∏è √Ä g√©rer (red√©marrages)

**Conclusion de la comparaison** :

* **Streamlit Cloud** : ‚úÖ **Solution retenue** - Id√©al pour prototypes, d√©mos, projets acad√©miques (gratuit, simple)
* **AWS EC2** : Test√© puis d√©sactiv√© - Recommand√© pour production, besoins sp√©cifiques, contr√¥le total (payant, flexible)

**D√©cision** : Streamlit Cloud a √©t√© choisi comme solution de d√©ploiement final pour ce projet acad√©mique, 
offrant un excellent compromis entre fonctionnalit√©s et co√ªt (gratuit).

